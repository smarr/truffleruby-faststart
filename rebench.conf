# -*- mode: yaml -*-
# Config file for ReBench
default_experiment: all
default_data_file: 'benchmark.data'

.are_we_fast_yet:
    ## this is ignored by rebench
    iteration_numbers:
        fast_vm:      &FAST_VM      3000
        slow_vm:      &SLOW_VM      250
        very_slow_vm: &VERY_SLOW_VM 100

# definition of benchmark suites
benchmark_suites:
    steady-som:
        gauge_adapter: RebenchLog
        command: " -cp .:Core:CD:DeltaBlue:Havlak:Json:NBody:Richards:../../implementations/TruffleSOM/Smalltalk Harness.som  %(benchmark)s %(variable)s "
        max_invocation_time: 5000
        variable_values: [*FAST_VM] ## the number iterations measured
        location: benchmarks/SOM
        benchmarks: &BENCHMARKS
            - DeltaBlue:
                extra_args: 12000
            - Richards:
                extra_args: 100
            - Json:
                extra_args: 100
            - CD:
                extra_args: 250
            - Havlak:
                extra_args: 1500
            
            - Bounce:
                extra_args: 1500
            - List:
                extra_args: 1500
            - Mandelbrot:
                extra_args: 500
            - NBody:
                extra_args: 250000
            - Permute:
                extra_args: 1000
            - Queens:
                extra_args: 1000
            - Sieve:
                extra_args: 3000
            - Storage:
                extra_args: 1000
            - Towers:
                extra_args: 600

    steady-som-interp:
        gauge_adapter: RebenchLog
        command: " -cp .:Core:CD:DeltaBlue:Havlak:Json:NBody:Richards:../../implementations/TruffleSOM/Smalltalk Harness.som  %(benchmark)s %(variable)s "
        max_invocation_time: 5000
        variable_values: [*VERY_SLOW_VM] ## the number iterations measured
        location: benchmarks/SOM
        benchmarks: *BENCHMARKS

    steady-somns:
        gauge_adapter: RebenchLog
        command: " Harness.ns %(benchmark)s %(variable)s "
        location: benchmarks/SOMns
        variable_values: [*FAST_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    steady-java:
        gauge_adapter: RebenchLog
        command: " -cp ../benchmarks/Java/benchmarks.jar Harness %(benchmark)s %(variable)s "
        variable_values: [*FAST_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    steady-ruby:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(variable)s "
        variable_values: [*FAST_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS
    
    steady-crystal:
        gauge_adapter: RebenchLog
        location: benchmarks/Crystal
        command: "./harness %(benchmark)s %(variable)s "
        variable_values: [*FAST_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    ruby-interp:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(variable)s "
        variable_values: [*VERY_SLOW_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS
    
    ruby-indy:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness.rb %(benchmark)s %(variable)s "
        variable_values: [*SLOW_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS
    
    ruby-rbx:
        gauge_adapter: RebenchLog
        location: benchmarks/Ruby
        command: "harness-rbx.rb %(benchmark)s %(variable)s "
        variable_values: [*VERY_SLOW_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS
    
    steady-js:
        gauge_adapter: RebenchLog
        location: benchmarks/JavaScript
        command: "harness.js %(benchmark)s %(variable)s "
        variable_values: [*FAST_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    pharo:
        gauge_adapter: RebenchLog
        location: benchmarks/Smalltalk
        command: "AWFY_Pharo.image run.st %(benchmark)s %(variable)s "
        variable_values: [*SLOW_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    squeak32:
        gauge_adapter: RebenchLog
        location: benchmarks/Smalltalk
        command: "AWFY_Squeak32.image run.st %(benchmark)s %(variable)s "
        variable_values: [*SLOW_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    squeak64:
        gauge_adapter: RebenchLog
        location: benchmarks/Smalltalk
        command: "AWFY_Squeak64.image run.st %(benchmark)s %(variable)s "
        variable_values: [*SLOW_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS

    rsqueak:
        gauge_adapter: RebenchLog
        location: benchmarks/Smalltalk
        command: "AWFY_RSqueak.image run.st %(benchmark)s %(variable)s "
        variable_values: [*SLOW_VM] ## the number iterations measured
        max_invocation_time: 6000
        benchmarks: *BENCHMARKS


# VMs have a name and are specified by a path and the binary to be executed
executors:
    # JVMs
    GraalBasic:
        path: implementations/
        description: A JVM with Graal, and Graal as top-tier compiler
        executable: graal.sh
        build: [implementations/build-graal.sh]
    GraalC2:
        path: implementations/
        description: A JVM with Graal, but C2 as top-tier compiler
        executable: graal-c2.sh
    GraalEnterprise:
        path: implementations/
        executable: graal-enterprise.sh
    Java8U66:
        path: implementations/
        executable: java8.sh

    # SOM VMs
    TruffleSOM:
        path: implementations/
        executable: TruffleSOM.sh
        args: "-vv "
    TruffleSOM-Enterprise:
        path: implementations/
        executable: TruffleSOM-e.sh
        args: "-vv "
    TruffleSOM-TOM:
        path: implementations/
        executable: TruffleSOM-TOM.sh
        args: "-vv "
    TruffleSOM-TOM-Enterprise:
        path: implementations/
        executable: TruffleSOM-TOM-e.sh
        args: "-vv "

    SOM:
        path: implementations/SOM
        executable: som.sh
        build: [implementations/build-som.sh]
    SOMpp:
        path: implementations/SOMpp
        executable: som.sh
        args: " -H512MB "
        build: [make]
    SOMppOMR:
        path: implementations/SOMppOMR
        executable: som.sh
        args: " -H512MB "
        build: [../build-sompp-omr.sh]
    SOMns:
        path: implementations/SOMns
        executable: fast
        build: [implementations/build-somns.sh]
    SOMns-Enterprise:
        path: implementations/
        executable: SOMns-e.sh
        build: [implementations/build-somns.sh]

    # Ruby VMs
    JRubyTruffle:
        path: implementations/
        executable: jruby-truffle.sh
    JRubyTruffleEnterprise:
        path: implementations/
        executable: jruby-truffle-e.sh
    JRubyC2:
        path: implementations/
        executable: jruby.sh
    JRubyJ8:
        path: implementations/
        executable: jruby-j8.sh
    JRubyGraal:
        description: JRuby, without Truffle, running with a JVM that uses Graal as top-tier compiler
        path: implementations/
        executable: jruby-graal.sh
    MRI23:
        path: implementations/
        executable: mri-23.sh
    RBX314:
        path: implementations/
        executable: rbx-314.sh
    Topaz:
        path: implementations/topaz/bin/
        executable: topaz

    Crystal:
        path: implementations/
        executable: crystal.sh
        build: [benchmarks/Crystal/build.sh]

    # JavaScript VMs
    Node:
        path: implementations/
        executable: node.sh
    GraalJS:
        path: implementations/
        executable: graaljs.sh

    # Smalltalk VMs
    Pharo:
      path: implementations/
      executable: pharo
    Squeak32:
      path: implementations/
      executable: squeak32
    Squeak64:
      path: implementations/
      executable: squeak64
    RSqueak:
      path: implementations/
      executable: rsqueak.sh

experiments:
    steady-java:
        description: Measure steady state performance
        suites: [steady-java]
        executions:
            - GraalC2
            - GraalBasic
            - GraalEnterprise
            - Java8U66
    steady-som:
        executions:
            - SOMns:
                suites: [steady-somns]
            - SOMns-Enterprise:
                suites: [steady-somns]
            - TruffleSOM:
                suites: [steady-som]
            - TruffleSOM-Enterprise:
                suites: [steady-som]
            - TruffleSOM-TOM:
                suites: [steady-som]
            - TruffleSOM-TOM-Enterprise:
                suites: [steady-som]
            - SOM:
                suites: [steady-som-interp]
            - SOMpp:
                suites: [steady-som-interp]
            - SOMppOMR:
                suites: [steady-som-interp]
    steady-ruby:
        suites: [steady-ruby]
        executions:
            - JRubyTruffle
            - JRubyTruffleEnterprise
            - Topaz
    steady-crystal:
        suites: [steady-crystal]
        executions: [Crystal]
    steady-js:
        suites: [steady-js]
        executions:
            - Node
            - GraalJS
    ruby-others:
        executions:
            - MRI23:
                suites: [ruby-interp]
            - JRubyGraal:
                suites: [ruby-indy]
            - JRubyC2:
                suites: [ruby-indy]
            - JRubyJ8:
                suites: [ruby-indy]
            - RBX314:
                suites: [ruby-rbx]
    smalltalk:
        executions:
          - Pharo:
              suites: [pharo]
          - Squeak32:
              suites: [squeak32]
          - Squeak64:
              suites: [squeak64]
          - RSqueak:
              suites: [rsqueak]
