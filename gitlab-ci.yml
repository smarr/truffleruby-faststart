stages:
  - build
  - test
  - benchmark

# Build the VMs and run tests
build-jvm-ce:
  stage: build
  tags: [yuria]
  script:
    - export PROJECT_FOLDER=$(pwd)
    - export PATH=${PROJECT_FOLDER}/bin:${PATH}
    - export VARIANT=jvm-ce
    - jt build --env ${VARIANT}
    - export RESULT_HOME=$(dirname $(jt --use ${VARIANT} graalvm-home))
    - cd ${RESULT_HOME}
    - mv $(basename $(jt --use ${VARIANT} graalvm-home)) truffleruby-${VARIANT}
    - time tar cJf ${PROJECT_FOLDER}/truffleruby-${VARIANT}.tar.xz truffleruby-${VARIANT}
    - ls -lah ${PROJECT_FOLDER}/truffleruby-${VARIANT}.tar.xz
    - time tar cjf ${PROJECT_FOLDER}/truffleruby-${VARIANT}.tar.bzip2 truffleruby-${VARIANT}
    - ls -lah ${PROJECT_FOLDER}/truffleruby-${VARIANT}.tar.bzip2
    - time tar cf ${PROJECT_FOLDER}/truffleruby-${VARIANT}.tar truffleruby-${VARIANT}
    - ls -lah ${PROJECT_FOLDER}/truffleruby-${VARIANT}.tar
    - cd ${PROJECT_FOLDER}
    
    # Run time: 2.3min
    - jt --use ${RESULT_HOME}/truffleruby-${VARIANT}/bin/truffleruby test fast

    # Run time: 2sec
    - jt --use ${RESULT_HOME}/truffleruby-${VARIANT}/bin/truffleruby test :next
    
    - |
      sftp tmp-artifacts@stefan-marr.de << EOF
        -mkdir /incoming/${CI_PIPELINE_ID}/
        put ${PROJECT_FOLDER}/truffleruby-${VARIANT}.tar.xz /incoming/${CI_PIPELINE_ID}/
      EOF

build-jvm:
  stage: build
  tags: [yuria]
  script:
    - export PROJECT_FOLDER=$(pwd)
    - export PATH=${PROJECT_FOLDER}/bin:${PATH}
    - export VARIANT=jvm
    - jt build --env ${VARIANT}
    - export RESULT_HOME=$(dirname $(jt --use ${VARIANT} graalvm-home))
    - cd ${RESULT_HOME}
    - mv $(basename $(jt --use ${VARIANT} graalvm-home)) truffleruby-${VARIANT}
    - tar cJf ${PROJECT_FOLDER}/truffleruby-${VARIANT}.tar.xz truffleruby-${VARIANT}
    - |
      sftp tmp-artifacts@stefan-marr.de << EOF
        -mkdir /incoming/${CI_PIPELINE_ID}/
        put ${PROJECT_FOLDER}/truffleruby-${VARIANT}.tar.xz /incoming/${CI_PIPELINE_ID}/
      EOF

build-native:
  stage: build
  tags: [yuria]
  script:
    - export PROJECT_FOLDER=$(pwd)
    - export PATH=${PROJECT_FOLDER}/bin:${PATH}
    - export VARIANT=native
    - jt build --env ${VARIANT}
    - export RESULT_HOME=$(dirname $(jt --use ${VARIANT} graalvm-home))
    - cd ${RESULT_HOME}
    - mv $(basename $(jt --use ${VARIANT} graalvm-home)) truffleruby-${VARIANT}
    - tar cJf ${PROJECT_FOLDER}/truffleruby-${VARIANT}.tar.xz truffleruby-${VARIANT}
    - |
      sftp tmp-artifacts@stefan-marr.de << EOF
        -mkdir /incoming/${CI_PIPELINE_ID}/
        put ${PROJECT_FOLDER}/truffleruby-${VARIANT}.tar.xz /incoming/${CI_PIPELINE_ID}/
      EOF


test-jvm-ce:
  stage: test
  dependencies:
    - build-jvm-ce
  script:
    - export PROJECT_FOLDER=$(pwd)
    - export VARIANT=jvm-ce
    - sftp tmp-artifacts@stefan-marr.de:/incoming/${CI_PIPELINE_ID}/truffleruby-${VARIANT}.tar.xz
    - tar xJf ${PROJECT_FOLDER}/truffleruby-${VARIANT}.tar.xz
    - truffleruby-${VARIANT}/bin/truffleruby -e 'p 3+4'



# Build the VMs and run tests
benchmark1:
  stage: benchmark
  tags: [yuria]
  script:
    - export PROJECT_FOLDER=$(pwd)
    - export VARIANT=jvm-ce
    - tar xJf ${PROJECT_FOLDER}/truffleruby-${VARIANT}.xz
    - truffleruby-${VARIANT}/bin/truffleruby -e 'p 3+4'
    
    # Start Benchmarking
    - cd faststart
    - rebench --experiment="CI ID $CI_PIPELINE_ID" --branch="$CI_COMMIT_REF_NAME" -c rebench.conf s:*:List
    - rebench --experiment="CI ID $CI_PIPELINE_ID" --report-completion rebench.conf


# A full CI Run, which should be scheduled, weekly or so
full-test-run-on-jvm-ce:on-schedule:
  stage: build
  tags: [yuria]
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - bin/jt build --env jvm-ce
    
    # Run time: 2.3min
    - bin/jt --use jvm-ce test fast

    # Run time: 2sec
    - bin/jt --use jvm-ce test :next
    
    # Run time: 21min
    - bin/jt --use jvm-ce test :truffle
    
    # Run time: 6.6min
    - bin/jt --use jvm-ce test :language
    
    # Run time: 21min
    - bin/jt --use jvm-ce test :core
    
    # Run time: 2.5min
    - bin/jt --use jvm-ce test :library

    # Run time: 2.2min
    - bin/jt --use jvm-ce test :cext

    # Run time: 1min
    - bin/jt --use jvm-ce test :security

    # Run time: 12min
    - bin/jt --use jvm-ce test :command_line
